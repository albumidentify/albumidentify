#!/usr/bin/python2.5
import sys
sys.path.append("/usr/local/mp3parser")
import albumidentify
import parsemp3
import os
import serialisemp3
import mp3names
import lookups
import urllib
import md5
import shutil

def print_usage():
        print "usage: " + sys.argv[0] + " <srcpath> <destpath> [options]"
        print "  srcpath     A path containing MP3s to fingerprint and tag"
        print "  destpath    A path to write the tagged files to"
	print "  --force     Try and rename even when we think there are too few tracks"

def calc_average_bitrate(parsed_data):
	return (reduce(lambda a,b:a+b,
		[ (rate*count) for (rate,count) in parsed_data["bitrates"].items() ])/
			parsed_data["frames"])

if len(sys.argv) < 3:
	print_usage()
	sys.exit(1)

force = False

dest=sys.argv[2]

if len(sys.argv) > 3:
	for arg in sys.argv[3:]:
		if arg == "--force":
			force = True

try:
	dirinfo = albumidentify.get_dir_info(sys.argv[1])
except albumidentify.FingerprintFailed, e:
	print e
	report_file=open(os.path.join(sys.argv[1],"report.txt"),"w")
	print >>report_file,"No fingerprint available for file",e.fname
	report_file.close()
	sys.exit(1)

if len(dirinfo)<3 and not force:
	print "Too few tracks to be reliable, giving up.  Use --force to override"
	report_file=open(os.path.join(sys.argv[1],"report.txt"),"w")
	print >>report_file,"Too few tracks to be reliable"
	report_file.close()
	sys.exit(1)

data = albumidentify.guess_album(dirinfo)

try:
	(artist,album,rid,events,asin,trackdata,albumartist,releaseid) \
		= data.next()
except StopIteration,si:
	print "Couldn't identify album",sys.argv[1]
	report_file=open(os.path.join(sys.argv[1],"report.txt"),"w")
	print >>report_file,"Couldn't identify album"
	report_file.close()
	sys.exit(1)


if len(events) == 0:
	print "Coultn'd find a release event",sys.argv[1]
	report_file=open(os.path.join(sys.argv[1],"report.txt"),"w")
	print >>report_file,"No release events for",releaseid
	report_file.close()
	sys.exit(1)

date=events[0]
if "-" in date:
	year=date.split("-")[0]
else:
	year=date

if artist == "Soundtrack":
        dirname = artist
else:
        dirname = albumartist.sortName.strip()

destdir=os.path.join(dest,mp3names.FixFilename(mp3names.FixArtist(dirname)),mp3names.FixFilename("%(sortartist)s - %(date)s - %(name)s" % {
	"sortartist" : mp3names.FixArtist(albumartist.sortName.strip()),
	"date" : year,
	"name" : album.strip(),
	}))
print "Renaming to",destdir

def mkdirs(dest):
	if os.path.exists(dest):
		return
	# Make parent directories
	mkdirs(os.path.dirname(dest))
	os.mkdir(dest)

parsed_data={}
total_new_bitrate=0
total_old_bitrate=0
bitidentical=True
for (tracknum,artist,sortartist,title,dur,origname,artistid,trkid) in trackdata:
	destname=mp3names.FixFilename("%(tracknum)02d - %(artist)s - %(title)s.mp3" % {
		"tracknum" : tracknum,
		"artist" : mp3names.FixArtist(artist.strip()),
		"title" : title.strip(),
		})
	try:
		shutil.copy(origname,"/tmp/tmp.mp3")
		# Undo any normalisation thats been done.
		os.spawnlp(os.P_WAIT,"mp3gain","mp3gain","-u","-q","/tmp/tmp.mp3")
		parsed_data[tracknum]=parsemp3.parsemp3("/tmp/tmp.mp3")
	except:
		print "Failed to parse",`origname`
		raise
	destfile=os.path.join(destdir,destname)
	tags={
		"TIT2" : title,
		"TPE1" : artist,
		"TALB" : album,
		"TYER" : year,
		"TDAT" : date,
		"TRCK" : "%d/%d" % (tracknum,len(trackdata)),
		"UFID" : ("http://musicbrainz.org",trkid),
		"TXXX" : [("MusicBrainz Artist Id",artistid[30:]),("MusicBrainz Album Id",releaseid[31:])],
	# TCOM -- Composer
	# TDLY -- Playlist delay (preample)
	# TSOA -- Album sort order
	# TSOP -- Performer sort
	# TSOT -- Title Sort
	# TIPL -- Involved People
	# TPOS -- Part of set
	# TSST -- Set subtitle
		"COMM" : ""
	}
	#if asin is not None:
	#	tags["APIC"] = (imagemime,"\x03","",imagedata)

	tags["bitstream"] =  parsed_data[tracknum]["bitstream"]
	parsed_data[tracknum]["destfile"]=destfile
	parsed_data[tracknum]["origfile"]=origname
	parsed_data[tracknum]["outtags"]=tags
	if os.path.exists(parsed_data[tracknum]["destfile"]):
		parsed_data[tracknum]["destparse"]=parsemp3.parsemp3(
				parsed_data[tracknum]["destfile"])
		total_old_bitrate+=calc_average_bitrate(
				parsed_data[tracknum]["destparse"])
		bitidentical=bitidentical and (
			md5.md5(parsed_data[tracknum]["bitstream"]).digest()
			==md5.md5(parsed_data[tracknum]["destparse"]["bitstream"]).digest())
	else:
		bitidentical=False
	total_new_bitrate+=calc_average_bitrate(parsed_data[tracknum])

if bitidentical:
	overwrite=True
	overwrite_reason="Bitstreams are identical"
elif total_old_bitrate == 0:
	overwrite=True
	overwrite_reason="File didn't exist"
elif total_old_bitrate < total_new_bitrate:
	overwrite=True
	overwrite_reason="New version is higher bitrate (%f < %f)" % (
		total_old_bitrate,total_new_bitrate)
elif total_old_bitrate > total_new_bitrate:
	overwrite=False
	overwrite_reason="Old version has higher bitrate (%f > %f)" % (
		total_old_bitrate,total_new_bitrate)
else:
	overwrite=True
	overwrite_reason="New version has the same bitrate, but different bitstream"




if overwrite:
	mkdirs(destdir)

	# Grab album art
	imagemime = ""
	imagedata = ""
	if asin is not None:
		imageurl = lookups.get_album_art_url_for_asin(asin)
		if imageurl is not None:
			print imageurl
			imagedest = os.path.join(destdir, "folder.jpg")
			urllib.urlretrieve(imageurl, imagedest)
			if imageurl[-3:] == "jpg":
				imagemime = "image/jpeg"
			else:
				imagemime = "image/"+imageurl[-3:]
			print "Image encoding is ",imagemime

			imagefp = open(imagedest,"rb")
			imagedata = imagefp.read()
	# Write out the new MP3
	for i in parsed_data:
		if asin is not None:
			parsed_data[i]["outtags"]["APIC"]  \
					= (imagemime,"\x03","",imagedata)
		print parsed_data[i]["origfile"],"->",parsed_data[i]["destfile"]
		serialisemp3.output(parsed_data[i]["destfile"],
			parsed_data[i]["outtags"])
	os.spawnlp(os.P_WAIT,"mp3gain","mp3gain",
		"-a", # album gain
		"-c", # ignore clipping warning.
		*[x["destfile"] for x in parsed_data.values()])
	
report_file=open(os.path.join(sys.argv[1],"report.txt"),"w")
if overwrite:
	print "moved to %s (%s)" % (destdir,overwrite_reason)
	print >>report_file,"moved to %s (%s)" % (destdir,overwrite_reason)
else:
	print "Not replacing %s (%s)" % (destdir,overwrite_reason)
	print >>report_file,"Not replacing %s (%s)" % (destdir,overwrite_reason)

for k,v in parsed_data.items():
	print >>report_file, "%s:" % v["filename"]
	for i in v["errors"]:
		print >>report_file," %s: %s" % i
	print >>report_file
report_file.close()
