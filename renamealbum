#!/usr/bin/python2.5
#
# Identify, tag and sort music albums.
#
# (C) Copyright 2008, the albumidentify team
# See the README for a list of contributors.
#
# The latest version can be found at
# http://www.github.com/scottr/albumidentify
#

import sys
import os
from datetime import timedelta
import musicbrainz2.model
import toc
import discid
import shutil
import urllib
import mp3names
import submit #musicbrainz_submission_url()
import lookups
import albumidentify
import albumidentifyconfig
import operator
import tag
import parsemp3
import serialisemp3
import replaygain
import tempfile
import traceback
import datetime
import optparse
import puidsubmit
import sort
import socket
import stat
import memocache
import glob
import util
import errno

import ripcd

import toflac

# metadata plugins
import md_lastfm
import md_musicbrainz
import md_genre

# Catch connections timing out
socket.setdefaulttimeout(10)

string_expandos = ["trackname", "trackartist", "album", "albumartist", "sortalbumartist", "sorttrackartist"]
integer_expandos = ["tracknumber", "year"]

force_short_album = False
srcpath=None

class IdentifyFailedException(Exception):
	def __str__(self):
		return "Couldn't find a matching release"

class UnknownYearException(Exception):
	def __init__(self,artist,album):
		self.artist=artist
		self.album=album

	def __str__(self):
		return "Unknown year for %s %s" % (repr(self.artist),repr(self.album))

def is_block_device(path):
        statinfo = os.stat(path)
        return stat.S_ISBLK(statinfo.st_mode)


def get_release_by_fingerprints(disc):
        """ Do a fingerprint based search for a matching release.

        """
        dirinfo = albumidentify.get_dir_info(disc.dirname)

        if len(dirinfo) < 3 and not force_short_album:
                util.report("Too few tracks to be reliable (%i), use --force-short-album" % len(dirinfo))
                return None

        data = albumidentify.guess_album(dirinfo)
        try:
                (directoryname, albumname, rid, events, asin, trackdata, albumartist, releaseid) = \
                        data.next()
        except StopIteration,si:
                util.report("No matches from fingerprint search")
		return None

        release = lookups.get_release_by_releaseid(releaseid)
        print "Got result via audio fingerprinting!"

        if disc.tocfilename:
                util.report("Suggest submitting TOC and discID to musicbrainz:")
                util.report("Release URL: " + release.id + ".html")
                util.report("Submit URL : " + submit.musicbrainz_submission_url(disc))

        # When we id by fingerprints, the sorted original filenames may not
        # match the actual tracks (i.e. out of order, bad naming, etc). Here we
        # have identified the release, so we need to remember the actual
        # filename for each track for later.
        sorted(trackdata, key=operator.itemgetter(0)) # sort trackdata by tracknum
        disc.clear_tracks()
        for (tracknum,artist,sortartist,title,dur,origname,artistid,trkid) in trackdata:
                t = toc.Track(tracknum)
                t.filename = origname
                disc.tracks.append(t)

        return release

def get_sorted_directory(dirname):
	files = sort.sorted_dir(dirname)
	tracknum = 1
	# Assumes tracks are named in a sorted order
	tracknames = {}
	for i in files:
		fname=os.path.join(dirname,i)
		tracknames[tracknum] = fname
		tracknum+=1
	return tracknames

def submit_puids(disc, release):
	if not albumidentify.FORCE_ORDER:
		print "Not submitting: No order"
		return
	print "Looking up puids to submit..."
	dirinfo = albumidentify.get_dir_info(disc.dirname)

	tracknames = get_sorted_directory(disc.dirname)

	flag=False
	track2puid={}
	print release.artist.name,"-",release.title,":"
	for trackind in range(len(tracknames)):
		trackid = release.tracks[trackind].id
		puid = dirinfo[tracknames[trackind+1]].getPUID()
		if puid == None:
			print "%02d: No PUID" % (trackind+1)
			continue
		elif trackid not in [t.id for t in lookups.get_tracks_by_puid(puid)]:
			flag=True
			print "%02d:" % (trackind+1),puid,"->",release.tracks[trackind].title
			track2puid[trackid]=puid
		elif puid not in lookups.get_track_by_id(trackid).puids:
			# There is a mapping of puid -> trackid, but not of trackid->puid,
			# this almost certainly means our cache is out of date, so delete it.
			# This just meant that searching was slower, so next time we can find this
			# faster
			memocache.remove_from_cache("delayed_get_track_by_id",trackid)
	if flag and not albumidentifyconfig.config.getboolean("albumidentify",
			"push_shortcut_puids"):
		print "Not submitting PUIDs: Disabled by config"
	elif flag:
		print "Submitting PUIDs to Musicbrainz"
		puidsubmit.submit_puids_mb(track2puid)
	else:
		print "No shortcut puids need submitting"

def submit_isrcs(disc, release):
        if not lookups.SUBMIT_SUPPORT:
                print "Not submitting shortcut isrcs: need pymusicbrainz2 > 0.7.0"
                return
	if not albumidentify.FORCE_ORDER:
		print "Not submitting: No order"
		return
	
	print "Looking up ISRCs to submit..."
	tracknames = get_sorted_directory(disc.dirname)
	track2isrc = {}
	flag = False
	for trackind in range(len(release.tracks)):
		track = release.tracks[trackind]
		trackid = track.id
		isrc = disc.tracks[trackind].isrc
                #this is for backwards compatability and can probably
                #be remove 6 months from now Nov 6 2009
                #if we have a cached copy of a release the doesn't contain
                #the ISRCs field remove it from the cache and get a new copy
                try:
                    isrcs = track.isrcs
                except AttributeError:
                    memoize.remove_from_cache("delayed_get_release_by_releaseid",release.id)
                    release = lookups.get_release_by_releaseid(release.id)
                    isrcs = track.isrcs

		# These seem to be some dummy ISRCs - let's not submit them
		if isrc is None or isrc == 'P00000000000' or isrc == '000000000000':
			continue
		if isrc not in track.isrcs:
			flag = True
			track2isrc[trackid] = isrc
			print " %02d: %s -> %s" % (trackind+1,isrc, track.title)
	
	if flag and not albumidentifyconfig.config.getboolean("albumidentify",
			"push_shortcut_puids"):
		print "Not submitting ISRCs: Disabled by config"
	elif flag:
		print "Submitting ISRCs to Musicbrainz"
		puidsubmit.submit_isrcs_mb(track2isrc)
		memocache.remove_from_cache("delayed_get_release_by_releaseid", release.id)
	else:
		print "No ISRCs need submitting"
		

def get_musicbrainz_release(disc):
	""" Given a Disc object, try a bunch of methods to look up the release in
	musicbrainz.  If a releaseid is specified, use this, otherwise search by
	discid, then search by CD-TEXT and finally search by audio-fingerprinting.
	"""
	# If a release id has been specified, that takes precedence
	if disc.releaseid is not None:
		return (lookups.get_release_by_releaseid(disc.releaseid), "manual")

	# Otherwise, lookup the releaseid using the discid as a key
        if disc.discid is not None:
                results = lookups.get_releases_by_discid(disc.discid)
                if len(results) > 1:
                        for result in results:
                                util.report(result.release.id + ".html")
                        util.report("Ambiguous DiscID, trying fingerprint matching")
                        return (get_release_by_fingerprints(disc), "fingerprint")

                # DiscID lookup gave us an exact match. Use this!
                if len(results) == 1:
                        releaseid = results[0].release.id
                        util.report("Got release via discID")
                        return (lookups.get_release_by_releaseid(releaseid), "discid")

	# Otherwise, use CD-TEXT if present to guess the release
	if disc.performer is not None and disc.title is not None:
		util.report("Trying to look up release via CD-TEXT")
		util.report("Performer: " + disc.performer)
		util.report("Title    : " + disc.title)
		results = lookups.get_releases_by_cdtext(performer=disc.performer, 
                                        title=disc.title, num_tracks=len(disc.tracks))
		if len(results) == 1:
			util.report("Got result via CD-TEXT lookup!")
			util.report("Suggest submitting TOC and discID to musicbrainz:")
			util.report("Release URL: " + results[0].release.id + ".html")
			util.report("Submit URL : " + submit.musicbrainz_submission_url(disc))
			return (lookups.get_release_by_releaseid(results[0].release.id), "cdtext")
		elif len(results) > 1:
			for result in results:
				util.report(result.release.id + ".html")
			util.report("Ambiguous CD-TEXT")
		else:
			util.report("No results from CD-TEXT lookup.")

	if disc.dirname is not None:
		util.report("Trying to look up release via already tagged release-id")
		releases = {}
                files = sort.sorted_dir(disc.dirname)

                numfiles = 0

                for i in files:
                        file = os.path.join(disc.dirname, i)
                        tags = tag.read_tags(file)
                        if tag.ALBUM_ID in tags:
                                relid = tags[tag.ALBUM_ID]
                                releases[relid] = releases.get(relid, 0)+1
			else:
				# Give up if we didn't find a tag on the first file
				break
                        numfiles += 1
                if len(releases) == 1 and releases[releases.keys()[0]] == numfiles:
                        # Every file has the same musicbrainz release id.  See if this release
                        # has as many tracks as we have files
                        release = lookups.get_release_by_releaseid(releases.keys()[0])
                        if len(release.tracks) == numfiles:
                                util.report("Success! - %s.html" % release.id)
				return (release, "tagged")
	
        # Last resort, fingerprinting
        util.report("Trying fingerprint search")
	return (get_release_by_fingerprints(disc), "fingerprint")

def scheme_help():
        print "Naming scheme help:"
        print "Naming schemes are specified as a standard Python string expansion. The default scheme is:"
        print albumidentifyconfig.config.get("renamealbum", "naming_scheme")
        print "A custom scheme can be specified with --scheme. The list of expandos are:"
        for i in string_expandos:
                print " " + i + " (string)"
        for i in integer_expandos:
                print " " + i + " (integer)"

def path_arg_cb(option, opt_str, value, parser):
        path = os.path.abspath(value)
        if not os.path.isdir(path):
		raise optparse.OptionValueError("to %s must be a directory that exists" % value)
	setattr(parser.values, option.dest, path)

def path_is_raw_wavs(path):
        if not os.path.isdir(path):
                return False
        if glob.glob(os.path.join(path, "*.wav")):
                return True
        return False

def process_one_path(numargs, options, path):
	util.report("----renamealbum started----")
	# Do this here so it gets written to all util.reports
	if numargs > 1 and options.asin is not None:
		util.report("WARNING: renaming more than 1 folder and specifying an ASIN")
	if numargs > 1 and options.year is not None:
		util.report("WARNING: renaming more than 1 folder and specifying a year")
	if numargs > 1 and options.totaldiscs is not None:
		util.report("WARNING: renaming more than 1 folder and specifying total discs")
	srcpath = os.path.abspath(path)
	origsrcpath = srcpath
	try:
		deletepaths = []

		# Is srcpath a block device?
		if is_block_device(srcpath):
			rawpath = tempfile.mkdtemp()
			util.report("Ripping %s to %s" % (srcpath, rawpath))
			try:
				ripcd.rip_cd(srcpath, rawpath)
			except:
				util.report("Ripping of %s failed" % srcpath)
				rmrf(rawpath)
				return
			srcpath = rawpath
			deletepaths.append(srcpath)

		if not os.path.isdir(srcpath):
			print "Skipping non directory",srcpath
			return

		# Do we need to encode the (possibly new) srcpath?
		if path_is_raw_wavs(srcpath):
			newpath = tempfile.mkdtemp()
			util.report("Encoding to FLAC at %s. This may take some time..." % srcpath)
			toflac.process_item(srcpath, newpath, False)
                        srcpath = newpath
			deletepaths.append(srcpath)

		renamealbum(srcpath, options)

	except SystemExit:
		raise
	# Ignore keyboard interrupts
	except KeyboardInterrupt:
		raise
	except IdentifyFailedException:
		util.report("fail!")
	except:
		(t,v,tb) = sys.exc_info()
		util.report(t)
		util.report(v)
		for i in traceback.format_exception(t,v,tb):
			util.report(i.strip())
		del tb
		util.report("fail!")
	else:
		util.report("success!")

	for path in deletepaths:
		print "Cleaning up", path
		rmrf(path)

	if os.path.exists(origsrcpath):
		try:
			util.write_report(os.path.join(origsrcpath, "report.txt"))
		except Exception, e:
			print "Unable to write report:",str(e)

def main():
	global srcpath,force_short_album
	opts = optparse.OptionParser(usage="%s [options] <srcdir> [...]" % sys.argv[0])
	opts.add_option(
		"-r","--release-id",
		dest="releaseid",
		default=None,
		metavar="MBRELEASEID",
		help="The Musicbrainz release id for this disc. Use this to specify the release when discid lookup fails.")
	opts.add_option(
		"--no-embed-coverart",
		dest="embedcovers",
		action="store_false",
		default=True,
		help="Don't embed the cover-art in each file.")
	opts.add_option(
		"--release-asin",
		dest="asin",
		metavar="ASIN",
		default=None,
		help="Manually specify the Amazon ASIN number for discs that have more than one ASIN (useful to force the correct coverart image)."
		)
	opts.add_option(
		"--year",
		dest="year",
		metavar="YEAR",
		default=None,
		help="Overwrite the album release year.  Use to force a re-issue to the date of the original release or to provide a date where one is missing"
		)
	opts.add_option(
		"-n","--no-act",
		dest="noact",
		action="store_true",
		default=False,
		help="Don't actually tag and rename files."
		)
	opts.add_option(
		"--total-discs",
		dest="totaldiscs",
		metavar="DISCS",
		default = None
		)
	opts.add_option(
		"--no-force-order",
		dest="force_order",
		action="store_false",
		default=True,
		help="Don't require source files to be in order. Note: May cause false positives."
		)
	opts.add_option(
		"--force-short-album",
		dest="force_short_album",
		action="store_true",
		default=False,
		help="We won't try and rename albums via fingerprinting if they are less than 3 tracks long. Use this to override."
		)
	opts.add_option(
		"--dest-path",
		dest="destprefix",
		type="str",
		action="callback",
		callback=path_arg_cb,
		default=albumidentifyconfig.config.get("renamealbum", "dest_path"),
		metavar="PATH",
		help="Use PATH instead of the current path for creating output directories."
		)
	opts.add_option(
		"--scheme",
		dest="scheme",
		default= albumidentifyconfig.config.get("renamealbum", "naming_scheme"),
		metavar="SCHEME",
        	help="Specify a naming scheme, see --scheme-help"
		)
	opts.add_option(
		"--scheme-help",
		action="store_const",
		dest="action",
		const="scheme-help",
        	help="Help on naming schemes.",
		default="rename",
		)
	opts.add_option(
		"--leave-soundtrack-artist",
		action="store_true",
		dest="leave_soundtrack_artist",
		default=albumidentifyconfig.config.getboolean("renamealbum", "leave_soundtrack_artist"),
		help="Even if an album is classified as a Soundtrack, don't use \"Soundtrack\" as the artist name."
		)

	(options, args) = opts.parse_args()

	"""
	releaseid 	= options.releaseid
	embedcovers 	= options.embedcovers
	asin 		= options.asin
	year 		= options.year
	noact 		= options.noact
	totaldiscs 	= options.totaldiscs
        destprefix 	= options.destprefix
	scheme		= options.scheme
	force_short_album=options.force_short_album
	"""
	albumidentify.FORCE_ORDER = options.force_order
	force_short_album = options.force_short_album

	if options.action=="scheme-help":
		scheme_help()
		sys.exit(1)
		
	if len(args) < 1:
		opts.print_help()
		sys.exit(1)

	if len(args) > 1 and options.releaseid is not None:
		print "Cannot specify a release id and more than 1 source"
		sys.exit(2)

        try:
                check_scheme(options.scheme)
        except Exception, e:
                print "Naming scheme error: " + e.args[0]
		print "Scheme:",repr(options.scheme)
                sys.exit(1)

	# Check all paths first
	for path in args:
		if not os.path.exists(os.path.abspath(path)):
			print "%s doesn't exist!" % path
			opts.print_help()
			sys.exit(2)
	
	numargs = len(args)
	for path in args:
		process_one_path(numargs, options, path)

def renamealbum(srcpath, options):
        util.report("Using naming scheme: " + options.scheme)
        if options.destprefix:
                util.report("Using dest prefix: " + options.destprefix)

	if options.noact:
		print "Performing dry-run"

	util.report("Source path: " + srcpath)
	if os.getenv("TERM") in [ "xterm","screen"]:
		sys.stdout.write("\x1b]0;Renaming %s\x1b\\" % srcpath)

	if os.path.exists(os.path.join(srcpath, "data.toc")):
                disc = toc.Disc(cdrdaotocfile = os.path.join(srcpath, "data.toc"))
	elif os.path.exists(os.path.join(srcpath, "TOC")):
                disc = toc.Disc(cdrecordtocfile = os.path.join(srcpath, "data.toc"))
        else:
                disc = toc.Disc()
                disc.dirname = srcpath

        if disc.tocfilename:
                disc.discid = discid.generate_musicbrainz_discid(
                                disc.get_first_track_num(),
                                disc.get_last_track_num(),
                                disc.get_track_offsets())
                util.report("Found TOC, calculated discID: " + disc.discid)

	if options.releaseid:
                util.report("Forcing releaseid: " + options.releaseid)
		disc.releaseid = options.releaseid
	
	(release, method) = get_musicbrainz_release(disc)

	if release is None:
                util.report("no releases found")
		raise IdentifyFailedException()

        # Look for PUIDs to submit. Don't do this if we're naming based on
        # a discID.
        if method != "discid":
                submit_puids(disc, release)
		
	if disc.tocfilename:
		submit_isrcs(disc, release)

	util.report("release id: %s.html" % release.id)

	disc.releasetypes = release.getTypes()

	# No tracks, need to load them.
	if disc.tracks is None:
		disc.clear_tracks()
		tracknum=1
		
		dir = sort.sorted_dir(disc.dirname)
		for i in dir:
			fname=os.path.join(srcpath,i)
			t = toc.Track(tracknum)
			t.filename = fname
			tracknum+=1
			disc.tracks.append(t)

	disc.set_musicbrainz_tracks(release.getTracks())
	disc.releasedate = release.getEarliestReleaseDate()

	disc.artist = release.artist.name
        disc.sortartist = release.artist.sortName
        if not disc.sortartist:
                disc.sortartist = mp3names.FixArtist(disc.artist)

	if musicbrainz2.model.Release.TYPE_SOUNDTRACK in disc.releasetypes and not options.leave_soundtrack_artist:
		disc.artist = "Soundtrack"
		disc.sortartist = "Soundtrack"

	disc.album = release.title
	if options.year is not None:
		disc.year = options.year
		disc.releasedate = options.year
	elif disc.releasedate is not None:
		disc.year = disc.releasedate[0:4]
	else:
                util.report("couldn't determine year for %s - %s" % (`disc.artist`, `disc.album`))
		memocache.remove_from_cache("delayed_get_release_by_releaseid", release.id)
		raise UnknownYearException(disc.artist,disc.album)

	disc.compilation = 0
	disc.number = 0
	disc.totalnumber = 0
	if options.asin is not None:
		disc.asin = options.asin
	else:
		disc.asin = lookups.get_asin_from_release(release, prefer=".co.uk")
			
	# Set the compilation tag appropriately
	if musicbrainz2.model.Release.TYPE_COMPILATION in disc.releasetypes:
		disc.compilation = 1
	
	# Get album art
	imageurl = lookups.get_album_art_url_for_asin(disc.asin)
	# Check for manual image
        imagemime = None
        imagepath = None
        image_needs_unlink = False
	if imageurl is not None:
                print "Downloading album art from %s" % imageurl
		if not options.noact:
                        try:
                                (fd,tmpfile) = tempfile.mkstemp(suffix = ".jpg")
                                os.close(fd)
                                (f,h) = urllib.urlretrieve(imageurl, tmpfile)
                                if h.getmaintype() != "image":
                                        print "WARNING: image url returned unexpected mimetype: %s" % h.gettype()
                                        os.unlink(tmpfile)
                                else:
                                        imagemime = h.gettype()
                                        imagepath = tmpfile
                                        image_needs_unlink = True
                        except:
                                print "WARNING: Failed to retrieve coverart (%s)" % imageurl
	elif os.path.exists(os.path.join(srcpath, "folder.jpg")):
		print "Using existing image"
		if not options.noact:
                        imagemime="image/jpeg"
                        imagepath = os.path.join(srcpath, "folder.jpg")

	# Deal with disc x of y numbering
	(albumname, discnumber, disctitle) = lookups.parse_album_name(disc.album)
	if discnumber is None:
		disc.number = 1
		disc.totalnumber = 1
	elif options.totaldiscs is not None:
		disc.totalnumber = totaldiscs
		disc.number = int(discnumber)
	else:
		disc.number = int(discnumber)
		discs = lookups.get_all_releases_in_set(release.id)
		disc.totalnumber = len(discs)

	print "disc " + str(disc.number) + " of " + str(disc.totalnumber)

	(srcfiles, destfiles, needs_replaygain) = name_album(disc, release, srcpath, options.scheme, options.destprefix, imagemime, imagepath, options.embedcovers, options.noact)

        if (image_needs_unlink):
                os.unlink(imagepath)

	if not options.noact and len(destfiles) > 0 and needs_replaygain:
		print "Adding replaygain"
		replaygain.add_gain(destfiles)


def get_file_list(disc):
        # If the tracks don't have filenames attached, just use the files in
        # the directory as if they are already in order
        files = []
        if (disc.tracks[0].filename is None):
		files = sort.sorted_dir(disc.dirname)
        else:
                files = [ x.filename for x in disc.tracks ]
        return files

def get_track_artist_info(release, track):
        """ Returns a tuple describing the track artist.

            (track_artist, track_sort_artist, track_artist_id).
        """
        if release.isSingleArtistRelease():
                track_artist = release.artist.name
                track_artist_id = release.artist.id
                track_sort_artist = release.artist.sortName
        else:
                ta = lookups.get_track_artist_for_track(track)
                track_artist = ta.name
                track_artist_id = ta.id
                track_sort_artist = ta.sortName

        # Fall back to trying to guess sortartist if musicbrainz doesn't have
        # one.
        if not track_sort_artist:
                track_sort_artist = mp3names.FixArtist(track_artist)

        return (track_artist, track_sort_artist, track_artist_id)

def check_scheme(scheme):
        """ Tries a dummy expansion on the naming scheme, raises an exception
            if the scheme contains expandos that we don't recognise.
        """
        dummyvalues = {}
        for k in string_expandos:
                dummyvalues[k] = "foo"
        for k in integer_expandos:
                dummyvalues[k] = 1
        try:
                scheme % dummyvalues
        except KeyError, e:
                raise Exception("Unknown expando in naming scheme: %s" % e.args)
        except ValueError, e:
                raise Exception("Failed to parse naming scheme: %s" % e.args)

def expand_scheme(scheme, release, disc, track, tracknumber):
        (track_artist, track_sort_artist, track_artist_id) = get_track_artist_info(release, track.mb_track)

        # We "fix" each component individually so that we can preserve forward
        # slashes in the naming scheme.
        expando_values = { "trackartist" : mp3names.FixFilename(track_artist),
                    "albumartist" : mp3names.FixFilename(disc.artist),
                    "sortalbumartist" : mp3names.FixFilename(disc.sortartist),
                    "sorttrackartist" : mp3names.FixFilename(track_sort_artist),
                    "album" : mp3names.FixFilename(disc.album),
                    "year" : int(disc.year),
                    "tracknumber" : int(tracknumber),
                    "trackname" : mp3names.FixFilename(track.mb_track.title)
        }
        
        try:
                newpath = scheme % expando_values
        except KeyError, e:
                raise Exception("Unknown expando %s" % e.args)

        newpath = os.path.normpath(newpath)

        return newpath

def rmrf(dir):
        for root, dirs, files in os.walk(dir, topdown=False):
            for name in files:
                os.remove(os.path.join(root, name))
            for name in dirs:
                os.rmdir(os.path.join(root, name))
        os.rmdir(dir)

def calc_average_bitrate(filename):
        if filename.endswith(".mp3"):
                return calc_average_bitrate_mp3(parsemp3.parsemp3(filename))
	elif filename.endswith(".flac"):
		# Flac doesn't have a bitrate.  Return '1' so that it will
		# calculate them as the same and ignore
		return 1
        else:
                return 0

def calc_average_bitrate_mp3(parsed_data):
	# If we didn't find any frames, it's a dodgy mp3
	if parsed_data["frames"]==0:
		return -1
        return (reduce(lambda a,b:a+b,
                [ (rate*count) for (rate,count) in parsed_data["bitrates"].items() ],0)/
                        parsed_data["frames"])

def name_album(disc, release, srcpath, scheme, destprefix, imagemime=None, imagepath=None, embedcovers=False, noact=False, move=False):
        files = get_file_list(disc)

        if len(files) != len(disc.tracks):
                util.report("Number of files to rename (%i) != number of tracks in release (%i)" % (len(files), len(disc.tracks)))
                assert False

        tracknum = 0
        srcfiles = []
        destfiles = []
        needs_replaygain = True

        # Step 1: Tag all of the files into a temporary directory
        tmpdir = tempfile.mkdtemp()
        tmpfiles = [] 

        (albumname, discnumber, discname) = lookups.parse_album_name(disc.album)

        for file in files:
                (root,ext) = os.path.splitext(file)
                tracknum = tracknum + 1
                track = disc.tracks[tracknum - 1]
                mbtrack = track.mb_track

                if mbtrack.title == "[silence]":
                        continue

                newpath = expand_scheme(scheme, release, disc, track, tracknum)
                newpath += ext.lower()

                if destprefix != "":
                        newpath = os.path.join(destprefix, newpath)
                else:
                        newpath = os.path.join(srcpath, "../%s" % newpath)

                newpath = os.path.normpath(newpath)
                newfilename = os.path.basename(newpath)

                print "Tagging: " + newfilename

                entry = {}
                entry["srcfilepath"] = os.path.join(srcpath, file)
                entry["tmpfilename"] = os.path.join(tmpdir, newfilename)
                entry["destfilepath"] = newpath
                tmpfiles.append(entry)

                srcfilepath = os.path.join(srcpath, file)

                if not noact and ext.lower() != ".mp3":
                        shutil.copyfile(os.path.join(srcpath, file), entry["tmpfilename"])
                        entry["gain"] = replaygain.get_gain(entry["tmpfilename"])
                        replaygain.remove_gain(entry["tmpfilename"])
                        tag.remove_tags(entry["tmpfilename"])

                (track_artist, track_sort_artist, track_artist_id) = get_track_artist_info(release, track.mb_track)

                # Set up the tag list so that we can pass it off to the
                # container-specific tagger function later.
                tags = {}
                tags[tag.TITLE] = mbtrack.title
                tags[tag.ARTIST] = track_artist
                tags[tag.ALBUM_ARTIST] = disc.artist
                tags[tag.TRACK_NUMBER] = str(tracknum)
                tags[tag.TRACK_TOTAL] = str(len(disc.tracks))
                tags[tag.ALBUM] = albumname # does not contain "(disc 1: foo)"
                tags[tag.ALBUM_ID] = os.path.basename(release.id)
                tags[tag.ALBUM_ARTIST_ID] = os.path.basename(release.artist.id)
                tags[tag.ARTIST_ID] = os.path.basename(track_artist_id)
                tags[tag.TRACK_ID] = os.path.basename(mbtrack.id)
                tags[tag.DATE] = disc.releasedate
                tags[tag.YEAR] = disc.year
                tags[tag.SORT_ARTIST] = track_sort_artist
                tags[tag.SORT_ALBUM_ARTIST] = disc.sortartist

                if disc.discid:
                        tags[tag.DISC_ID] = disc.discid
                if disc.compilation:
                        tags[tag.COMPILATION] = "1"
                if track.isrc is not None:
                        tags[tag.ISRC] = track.isrc
                if disc.mcn is not None:
                        tags[tag.MCN] = disc.mcn
                for rtype in disc.releasetypes:
                        types = tags.get(tag.RELEASE_TYPES, [])
                        types.append(musicbrainz2.utils.getReleaseTypeName(rtype))
                        tags[tag.RELEASE_TYPES] = types
                if disc.totalnumber > 1:
                        tags[tag.DISC_NUMBER] = str(disc.number)
                        tags[tag.DISC_TOTAL_NUMBER] = str(disc.totalnumber)
                if discname is not None:
                        tags[tag.DISC_NAME] = discname

                image = None
                if embedcovers and imagepath:
                        image = imagepath

		md_lastfm.get_tags(tags, release, mbtrack, track_artist)
		md_musicbrainz.get_tags(tags, release, mbtrack, track_artist)
		md_genre.get_tags(tags, release, mbtrack, track_artist)

                tag.tag(entry["tmpfilename"], tags, noact, image)

                if entry.has_key("gain") and entry["gain"] != {}:
                        # Re-apply old replaygain settings to the file.
                        # This will only affect FLACs.
                        replaygain.set_gain(entry["tmpfilename"], entry["gain"])
                        needs_replaygain = False

                # Special case mp3.. tag.tag() won't do anything with mp3 files
                # as we write out the tags + bitstream in one operation, so do
                # that here.
                if ((not noact) and (ext.lower() == ".mp3")):
                        # Make a temp copy and undo any mp3gain
                        (fd,tmpmp3) = tempfile.mkstemp(suffix=".mp3")
                        os.close(fd)
                        shutil.copy(srcfilepath, tmpmp3)
                        replaygain.remove_gain(tmpmp3)

                        parsed_data = parsemp3.parsemp3(tmpmp3)
                        outtags = tag.get_mp3_tags(tags)
                        outtags["bitstream"] = parsed_data["bitstream"]
                        if image:
                                imagefp=open(image, "rb")
                                imagedata=imagefp.read()
                                imagefp.close()
                                outtags["APIC"] = (imagemime,"\x03","",imagedata)
                        serialisemp3.output(entry["tmpfilename"], outtags)
                        os.unlink(tmpmp3)

                srcfiles.append(srcfilepath)

	if noact:
		print "Not calculating bitrates - in -n mode"
	else:
		# Step 2: Compare old and new bitrates
		old_total_bitrate = 0
		new_total_bitrate = 0
		for entry in tmpfiles:
			if os.path.exists(entry["destfilepath"]):
				old_total_bitrate += calc_average_bitrate(entry["destfilepath"])
			new_total_bitrate += calc_average_bitrate(entry["tmpfilename"])

		if old_total_bitrate == 0:
			util.report("Destination files do not exist, creating")
		elif old_total_bitrate == new_total_bitrate:
			util.report("Bitrates are the same, ignoring")
			rmrf(tmpdir)
			return (srcfiles, destfiles, False)
		elif old_total_bitrate < new_total_bitrate:
			util.report("Old bitrate lower than new bitrate, overwriting (%d / %d)" % (old_total_bitrate, new_total_bitrate))
		elif old_total_bitrate > new_total_bitrate:
			util.report("Not overwriting, old bitrate higher than new (%d / %d)" % (old_total_bitrate, new_total_bitrate))
			rmrf(tmpdir)
			return (srcfiles, destfiles, False)

	try:
		os.makedirs(os.path.dirname(tmpfiles[0]["destfilepath"]))
	except OSError, e:
		if e.errno != errno.EEXIST:
			raise
        # Step 3: Overwrite/create files if appropriate
        for entry in tmpfiles:
                newpath = entry["destfilepath"]
                newdir = os.path.dirname(newpath)
                newfile = os.path.basename(newpath)

                if not noact:
                        util.report(entry["srcfilepath"] + " -> " + newpath)
                        # Try renaming first, then fall back to copy/rm
                        try:
                                os.rename(entry["tmpfilename"], newpath)
                        except OSError:
                                shutil.copyfile(entry["tmpfilename"], newpath)
                                os.remove(entry["tmpfilename"])

                destfiles.append(newpath)

        # Move original TOC
        if disc.tocfilename:
                if not noact:
			util.report(os.path.join(srcpath, disc.tocfilename) + " -> " +  os.path.join(newdir, os.path.basename(disc.tocfilename)))
                        shutil.copyfile(os.path.join(srcpath, disc.tocfilename), os.path.join(newdir, os.path.basename(disc.tocfilename)))

        # Move coverart
        if imagepath and not noact:
                util.report(imagepath + " -> " + os.path.join(newdir, "folder.jpg"))
                shutil.copyfile(imagepath, os.path.join(newdir, "folder.jpg"))

        rmrf(tmpdir)
        return (srcfiles, destfiles, needs_replaygain)
	

if __name__ == "__main__":
	main()
	sys.exit(0)
