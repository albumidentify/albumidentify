#!/usr/bin/python
#
# Identify, tag and sort music albums.
#
# (C) Copyright 2008, the albumidentify team
# See the README for a list of contributors.
#
# The latest version can be found at
# http://www.github.com/scottr/albumidentify
#

import sys
import os
import time
import shutil
import urllib
import operator
import tempfile
import traceback
import datetime
import optparse
import socket
import stat
import errno
import re

from datetime import timedelta
import musicbrainz2.model

srcdir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), "src"))
if os.path.exists(srcdir):
	sys.path.insert(0, srcdir)

from renamealbum import toc
from renamealbum import discid
from renamealbum import mp3names
from renamealbum import submit #musicbrainz_submission_url()
from renamealbum import lookups
from renamealbum import albumidentify
from renamealbum import albumidentifyconfig
from renamealbum import tag
from renamealbum import parsemp3
from renamealbum import serialisemp3
from renamealbum import replaygain
from renamealbum import puidsubmit
from renamealbum import sort
from renamealbum import memocache
from renamealbum import util
from renamealbum import fingerprint
from renamealbum import ripcd
from renamealbum import toflac
from renamealbum import coverart
from renamealbum import renamereport
# metadata plugins
from renamealbum import md_lastfm
from renamealbum import md_musicbrainz
from renamealbum import md_genre

# Catch connections timing out
socket.setdefaulttimeout(10)

string_expandos = ["trackname", "trackartist", "album", "albumartist", "sortalbumartist", "sorttrackartist"]
integer_expandos = ["tracknumber", "year"]

force_short_album = False
srcpath=None

successes=0

class IdentifyFailedException(Exception):
	def __str__(self):
		return "Couldn't find a matching release"

class UnknownYearException(Exception):
	def __init__(self,artist,album):
		self.artist=artist
		self.album=album

	def __str__(self):
		return "Unknown year for %s %s" % (repr(self.artist),repr(self.album))

class FileCountMismatchException(Exception):
	def __init__(self,oldcount,newcount):
		self.oldcount=oldcount
		self.newcount=newcount

	def __str__(self):
		return "Number of files from the source directory (%d) does not match the number of files in the \
			destination directory (%d). Probably a different album." % (self.oldcount, self.newcount)

def is_block_device(path):
	statinfo = os.stat(path)
	return stat.S_ISBLK(statinfo.st_mode)

def get_release_by_fingerprints(disc):
	""" Do a fingerprint based search for a matching release."""
	dirinfo = albumidentify.get_dir_info(disc.dirname)

	if len(dirinfo) < 3 and not force_short_album:
		util.report("Too few tracks to be reliable (%i), use --force-short-album" % len(dirinfo))
		return None

	data = albumidentify.guess_album(dirinfo)
	try:
		(directoryname, albumname, rid, events, asin, trackdata, albumartist, releaseid) = \
				data.next()
	except StopIteration,si:
		util.report("No matches from fingerprint search")
		return None

	release = lookups.get_release_by_releaseid(releaseid)
	print "Got result via audio fingerprinting!"

	if disc.tocfilename:
		util.report("Suggest submitting TOC and discID to musicbrainz:")
		util.report("Release URL: " + release.id + ".html")
		util.report("Submit URL : " + submit.musicbrainz_submission_url(disc))

	# When we id by fingerprints, the sorted original filenames may not
	# match the actual tracks (i.e. out of order, bad naming, etc). Here we
	# have identified the release, so we need to remember the actual
	# filename for each track for later.
	sorted(trackdata, key=operator.itemgetter(0)) # sort trackdata by tracknum
	disc.clear_tracks()
	for (tracknum,artist,sortartist,title,dur,origname,artistid,trkid) in trackdata:
		t = toc.Track(tracknum)
		t.filename = origname
		disc.tracks.append(t)

	return release

def submit_puids(disc, release):
	print "Looking up puids to submit..."
	dirinfo = albumidentify.get_dir_info(disc.dirname)

	flag=False
	track2puid={}
	print release.artist.name,"-",release.title,":"
	for trackind in range(len(disc.tracks)):
		trackid=disc.tracks[trackind].mb_track.id
		puid = dirinfo[disc.tracks[trackind].filename].getPUID()
		if puid == None:
			print "%02d: No PUID" % (trackind+1)
			continue
		elif trackid not in [t.id for t in lookups.get_tracks_by_puid(puid)]:
			flag=True
			print "%02d:" % (trackind+1),puid,"->",release.tracks[trackind].title,"->",disc.tracks[trackind].filename
			track2puid[trackid]=puid
		elif puid not in lookups.get_track_by_id(trackid).puids:
			# There is a mapping of puid -> trackid, but not of trackid->puid,
			# this almost certainly means our cache is out of date, so delete it.
			# This just meant that searching was slower, so next time we can find this
			# faster
			memocache.remove_from_cache("delayed_get_track_by_id",trackid)
	if flag and not albumidentifyconfig.config.getboolean("albumidentify",
			"push_shortcut_puids"):
		print "Not submitting PUIDs: Disabled by config"
	elif flag:
		print "Submitting PUIDs to Musicbrainz"
		puidsubmit.submit_puids_mb(track2puid)
	else:
		print "No shortcut puids need submitting"

def submit_isrcs(disc, release):
	if not lookups.SUBMIT_SUPPORT:
		print "Not submitting shortcut isrcs: need pymusicbrainz2 > 0.7.0"
		return	

	print "Looking up ISRCs to submit..."
	tracknames = sort.get_sorted_directory(disc.dirname)
	track2isrc = {}
	flag = False
	for trackind in range(len(release.tracks)):
		track = disc.tracks[trackind]
		trackid=disc.tracks[trackind].mb_track.id
		isrc = disc.tracks[trackind].isrc
		isrcs = track.isrc

		# These seem to be some dummy ISRCs - let's not submit them
		if isrc is None or isrc == 'P00000000000' or isrc == '000000000000':
			continue
		if isrc not in track.isrc:
			flag = True
			track2isrc[trackid] = isrc
			print " %02d: %s -> %s" % (trackind+1,isrc, track.title)
	
	if flag and not albumidentifyconfig.config.getboolean("albumidentify",
			"push_shortcut_puids"):
		print "Not submitting ISRCs: Disabled by config"
	elif flag:
		print "Submitting ISRCs to Musicbrainz"
		puidsubmit.submit_isrcs_mb(track2isrc)
		memocache.remove_from_cache("delayed_get_release_by_releaseid", release.id)
	else:
		print "No ISRCs need submitting"
		

def get_musicbrainz_release (disc, options):
	""" Given a Disc object, try a bunch of methods to look up the release in
	musicbrainz.  If a releaseid is specified, use this, otherwise search by
	discid, then search by CD-TEXT and finally search by audio-fingerprinting.
	"""
	# If a release id has been specified, that takes precedence
	if disc.releaseid is not None:
		return (lookups.get_release_by_releaseid(disc.releaseid), "manual")

	# Otherwise, lookup the releaseid using the discid as a key
	if disc.discid is not None:
		results = lookups.get_releases_by_discid(disc.discid)
		if len(results) > 1:
			for result in results:
				util.report(result.release.id + ".html")
			util.report("Ambiguous DiscID, trying fingerprint matching")
			return (get_release_by_fingerprints(disc), "fingerprint")

		# DiscID lookup gave us an exact match. Use this!
		if len(results) == 1:
			releaseid = results[0].release.id
			util.report("Got release via discID")
			return (lookups.get_release_by_releaseid(releaseid), "discid")

	# There wasn't a lookup, so remove from the cache in case we add it
	memocache.remove_from_cache("delayed_get_releases_by_discid", disc.discid)

	# Otherwise, use CD-TEXT if present to guess the release
	if disc.performer is not None and disc.title is not None:
		util.report("Trying to look up release via CD-TEXT")
		util.report("Performer: " + disc.performer)
		util.report("Title	: " + disc.title)
		results = lookups.get_releases_by_cdtext(performer=disc.performer, 
										title=disc.title, num_tracks=len(disc.tracks))
		if len(results) == 1:
			util.report("Got result via CD-TEXT lookup!")
			util.report("Suggest submitting TOC and discID to musicbrainz:")
			util.report("Release URL: " + results[0].release.id + ".html")
			util.report("Submit URL : " + submit.musicbrainz_submission_url(disc))
			return (lookups.get_release_by_releaseid(results[0].release.id), "cdtext")
		elif len(results) > 1:
			for result in results:
				util.report(result.release.id + ".html")
			util.report("Ambiguous CD-TEXT")
		else:
			util.report("No results from CD-TEXT lookup.")

	if disc.dirname is not None:
		util.report("Trying to look up release via already tagged release-id")
		releases = {}
		files = sort.sorted_dir(disc.dirname)

		numfiles = 0

		for i in files:
			file = os.path.join(disc.dirname, i)
			tags = tag.read_tags(file)
			if tag.ALBUM_ID in tags:
				relid = tags[tag.ALBUM_ID]
				releases[relid] = releases.get(relid, 0)+1
			else:
				# Give up if we didn't find a tag on the first file
				break
			numfiles += 1
			if len(releases) == 1 and releases[releases.keys()[0]] == numfiles:
				# Every file has the same musicbrainz release id.  See if this release
				# has as many tracks as we have files
				release = lookups.get_release_by_releaseid(releases.keys()[0])
				if len(release.tracks) == numfiles:
					util.report("Success! - %s.html" % release.id)
			return (release, "tagged")
	
		# Last resort, fingerprinting
		if fingerprint.has_fingerprint_support():
			if options.fingerprint:
				util.report("Trying fingerprint search")
				return (get_release_by_fingerprints(disc), "fingerprint")
		else:
			print "Fingerprinting support not installed, please install libofa0"

		return (None, "gave up")


def scheme_help():
		print "Naming scheme help:"
		print "Naming schemes are specified as a standard Python string expansion. The default scheme is:"
		print albumidentifyconfig.config.get("renamealbum", "naming_scheme")
		print "A custom scheme can be specified with --scheme. The list of expandos are:"
		for i in string_expandos:
			print " " + i + " (string)"
		for i in integer_expandos:
			print " " + i + " (integer)"

def path_arg_cb(option, opt_str, value, parser):
	path = os.path.abspath(os.path.expanduser(value))
	if not os.path.isdir(path):
		raise optparse.OptionValueError("to %s must be a directory that exists" % value)
	setattr(parser.values, option.dest, path)

def path_is_raw_wavs(path):
	if not os.path.isdir(path):
		return False
	return ".wav" in set(os.path.splitext(i)[1] for i in os.listdir(path))

def process_one_path(numargs, options, path):
	global successes
	reportfile = None
	util.report("----renamealbum started----")
	# Do this here so it gets written to all util.reports
	if numargs > 1 and options.asin is not None:
		util.report("WARNING: renaming more than 1 folder and specifying an ASIN")
	if numargs > 1 and options.year is not None:
		util.report("WARNING: renaming more than 1 folder and specifying a year")
	if numargs > 1 and options.totaldiscs is not None:
		util.report("WARNING: renaming more than 1 folder and specifying total discs")
	srcpath = os.path.abspath(path)
	origsrcpath = srcpath
	try:
		deletepaths = []
		blockdevice=False

		# Is srcpath a block device?
		if is_block_device(srcpath):
			blockdevice=True
			reportfile = os.path.expanduser("~/renamealbum-report-%s.txt" % time.strftime("%Y-%m-%d-%H%M%S"))
			rawpath = tempfile.mkdtemp()
			util.report("Ripping %s to %s" % (srcpath, rawpath))
			try:
				ripcd.rip_cd(srcpath, rawpath)
			except Exception,e:
				util.report("Ripping of %s failed: %s" % (srcpath, e))
				rmrf(rawpath)
				raise
			srcpath = rawpath
			deletepaths.append(srcpath)
			if options.destprefix == "":
				options.destprefix = os.getcwd()

		if not os.path.isdir(srcpath):
			print "Skipping non directory",srcpath
			return
	
		process = False
		for i in os.listdir(srcpath):
			if os.path.splitext(i)[1].lower() in options.limit_extensions.split(','):
				process=True
		if not process:			
			print "%s has no supported files, ignoring" % path
			return

		# Do we need to encode the (possibly new) srcpath?
		if path_is_raw_wavs(srcpath):
			newpath = tempfile.mkdtemp()
			util.report("Encoding to FLAC at %s. This may take some time..." % srcpath)
			numcpus = options.numcpus
			if numcpus < 1:
				import multiprocessing
				numcpus = multiprocessing.cpu_count()
			toflac.process_paths([srcpath], newpath, numcpus)
			srcpath = newpath
			#only delete wavs we've created
			if blockdevice:
				deletepaths.append(srcpath)

		renamealbum(srcpath, options)

	except SystemExit:
		raise
	# Ignore keyboard interrupts
	except KeyboardInterrupt:
		raise
	except UnknownYearException:
		util.report("fail!")
	except IdentifyFailedException:
		util.report("fail!")
	except FileCountMismatchException:
		util.report("fail!")
	except:
		(t,v,tb) = sys.exc_info()
		for i in traceback.format_exception(t,v,tb):
			util.report(i.strip())
		del tb
		util.report("fail!")
	else:
		successes += 1
		util.report("success!")

	for path in deletepaths:
		print "Cleaning up", path
		rmrf(path)

	if os.path.exists(origsrcpath):
		try:
			if reportfile is None:
				reportfile = os.path.join(origsrcpath, "report.txt")
			util.write_report(reportfile)
		except Exception, e:
			print "Unable to write report:",str(e)

def main():
	global srcpath,force_short_album
	opts = optparse.OptionParser(usage="%s [options] <srcdir> [...]" % sys.argv[0])
	opts.add_option(
		"-r","--release-id",
		dest="releaseid",
		default=None,
		metavar="MBRELEASEID",
		help="The Musicbrainz release id for this disc. Use this to specify the release when discid lookup fails.")
	opts.add_option(
		"--no-embed-coverart",
		dest="embedcovers",
		action="store_false",
		default=True,
		help="Don't embed the cover-art in each file.")
	opts.add_option(
		"--no-fingerprinting",
		dest="fingerprint",
		action="store_false",
		default=True,
		help="Don't use any fingerprinting.")
	opts.add_option(
		"--no-replay-gain",
		dest="replaygain",
		action="store_false",
		default=True,
		help="Don't apply replay gain to each file.")
	opts.add_option(
		"--release-asin",
		dest="asin",
		metavar="ASIN",
		default=None,
		help="Manually specify the Amazon ASIN number for discs that have more than one ASIN (useful to force the correct coverart image)."
		)
	opts.add_option(
		"--year",
		dest="year",
		metavar="YEAR",
		default=None,
		help="Overwrite the album release year.  Use to force a re-issue to the date of the original release or to provide a date where one is missing"
		)
	opts.add_option(
		"-n","--no-act",
		dest="noact",
		action="store_true",
		default=False,
		help="Don't actually tag and rename files."
		)
	opts.add_option(
		"--total-discs",
		dest="totaldiscs",
		metavar="DISCS",
		default = None
		)
	opts.add_option(
		"--no-force-order",
		dest="force_order",
		action="store_false",
		default=albumidentifyconfig.config.getboolean("renamealbum", "force_order"),
		help="Don't require source files to be in order. Note: May cause false positives."
		)
	opts.add_option(
		"--force-short-album",
		dest="force_short_album",
		action="store_true",
		default=False,
		help="We won't try and rename albums via fingerprinting if they are less than 3 tracks long. Use this to override."
		)
	opts.add_option(
		"--dest-path",
		dest="destprefix",
		type="str",
		action="callback",
		callback=path_arg_cb,
		default=albumidentifyconfig.config.get("renamealbum", "dest_path"),
		metavar="PATH",
		help="Use PATH instead of the current path for creating output directories."
		)
	opts.add_option(
		"--scheme",
		dest="scheme",
		default= albumidentifyconfig.config.get("renamealbum", "naming_scheme"),
		metavar="SCHEME",
		help="Specify a naming scheme, see --scheme-help"
		)
	opts.add_option(
		"--scheme-help",
		action="store_const",
		dest="action",
		const="scheme-help",
		help="Help on naming schemes.",
		default="rename",
		)
	opts.add_option(
		"--leave-soundtrack-artist",
		action="store_true",
		dest="leave_soundtrack_artist",
		default=albumidentifyconfig.config.getboolean("renamealbum", "leave_soundtrack_artist"),
		help="Even if an album is classified as a Soundtrack, don't use \"Soundtrack\" as the artist name."
		)
	opts.add_option(
		"--limit-extensions",
		dest="limit_extensions",
		default=albumidentifyconfig.config.get("renamealbum", "limit_extensions"),
		help="Comma seperated list of music extensions to consider"
		)
	opts.add_option(
		"--no-dest",
		dest="no_dest",
		action="store_true",
		default=albumidentifyconfig.config.getboolean("renamealbum", "no_dest"),
		help="Remove conflicting files before rename to avoid duplicates"
		)
	opts.add_option(
		"-R","--recursive",
		dest="recursive",
		action="store_true",
		default=False,
		help="Process subdirectories recursively",
		)
	opts.add_option(
		"-j","--threads",
		 type="int",
		dest="numcpus",
		default=albumidentifyconfig.config.get("albumidentify", "threads"),
		metavar="THREADS",
		help="Spawn multipled THREADS for encoding"
		)

		

	(options, args) = opts.parse_args()

	"""
	releaseid			= options.releaseid
	embedcovers			= options.embedcovers
	fingerprint			= options.fingerprint
	replaygain			= options.replaygain
	asin				= options.asin
	year				= options.year
	noact				= options.noact
	force-order			= options.force_order
	force-short-album		= options.force_short_album
	totaldiscs			= options.totaldiscs
	destprefix			= options.destprefix
	scheme				= options.scheme
	scheme-help			= options.action
	leave-soundtrack-artist		= options.leave_soundtrack_artist
	limit-extensions		= options.limit_extensions
	no-dest				= options.no_dest
	recursive			= options.recursive
	"""
	albumidentify.FORCE_ORDER = options.force_order and albumidentify.FORCE_ORDER
	tag.supported_extensions = set(options.limit_extensions.split(",")).intersection(set(tag.supported_extensions))
	force_short_album = options.force_short_album

	if options.force_order is False:
		print "WARNING: Not sorting tracks, this can cause false positives."

	if options.releaseid is not None and not albumidentify.FORCE_ORDER:
		print "Using -r and --no-force-order is prohibited. Bad things will happen."
		sys.exit(2)

	if len(tag.supported_extensions)==0:
		print "Supported:",set(tag.supported_extensions)
		print "Configured:",set(options.limit_extensions.split(","))
		print "No possible extensions, aborting"
		sys.exit(2)

	if options.action=="scheme-help":
		scheme_help()
		sys.exit(2)
		
	if len(args) < 1:
		opts.print_help()
		sys.exit(2)

	if ( len(args) > 1 or options.recursive ) and options.releaseid:
		print "Cannot specify a release id and more than 1 source or recursive mode"
		sys.exit(2)

	try:
		check_scheme(options.scheme)
	except Exception, e:
		print "Naming scheme error: " + e.args[0]
		print "Scheme:",repr(options.scheme)
		sys.exit(2)

	if options.recursive:
		recurse = args[:]
		args = []
		for i in recurse:
			for (dirpath, dirnames, filenames) in os.walk(i):
				args.append(dirpath)


	# Check all paths first
	for path in args:
		if not os.path.exists(os.path.abspath(path)):
			print "%s doesn't exist!" % path
			opts.print_help()
			sys.exit(2)
	
	numargs = len(args)
	for path in args:
		process_one_path(numargs, options, path)

	if numargs > 1:
		renamereport.main(args)

	if successes == 0:
		return 2
	elif successes < numargs:
		return 1
	else:
		return 0

def construct_disc(srcpath):
	"Try and construct a Disc object, based on any TOC's found"
	if os.path.exists(os.path.join(srcpath, "data.toc")):
		disc = toc.Disc(cdrdaotocfile = os.path.join(srcpath, "data.toc"))
	elif os.path.exists(os.path.join(srcpath, "TOC")):
		disc = toc.Disc(cdrecordtocfile = os.path.join(srcpath, "data.toc"))
	else:
		disc = toc.Disc()
		disc.dirname = srcpath
	return disc

def calculate_discid(disc):
	if disc.tocfilename:
		disc.discid = discid.generate_musicbrainz_discid(
			disc.get_first_track_num(),
			disc.get_last_track_num(),
			disc.get_track_offsets())
		util.report("Found TOC, calculated discID: " + disc.discid)
	else:
		util.report("Skipping calculating discID")

def calculate_disc_numbering(disc, release, options):
	(albumname, discnumber, disctitle) = lookups.parse_album_name(disc.album)
	if discnumber is None:
		disc.number = 1
		disc.totalnumber = 1
	elif options.totaldiscs is not None:
		disc.totalnumber = totaldiscs
		disc.number = int(discnumber)
	else:
		disc.number = int(discnumber)
		discs = lookups.get_all_releases_in_set(release.id)
		disc.totalnumber = len(discs)
	return disc

def calculate_album_year(disc, release, options):
	disc.album = release.title
	if options.year is not None:
		disc.year = options.year
		disc.releasedate = options.year
		return

	if disc.releasedate is not None:
		disc.year = disc.releasedate[0:4]
		return

	if musicbrainz2.model.Release.TYPE_BOOTLEG in release.getTypes() or musicbrainz2.model.Release.TYPE_LIVE:
		m=re.match("^(?P<date>(?P<year>[0-9]{4})-[0-9]{2}-[0-9]{2}): .*",release.title)
		if m:
			disc.year = m.group("year")
			disc.releasedate = m.group("date")
			return

			
	util.report("couldn't determine year for %s - %s" % (`disc.artist`, `disc.album`))
	util.report("Use --year or add a year to the release on musicbrainz: %s.html" % release.id)
	memocache.remove_from_cache("delayed_get_release_by_releaseid", release.id)
	raise UnknownYearException(disc.artist,disc.album)

def renamealbum(srcpath, options):
	util.report("Using naming scheme: " + options.scheme)
	if options.destprefix:
		util.report("Using dest prefix: " + options.destprefix)

	if options.noact:
		print "Performing dry-run"

	util.report("Source path: " + srcpath)
	if os.getenv("TERM") in [ "xterm","screen"]:
		sys.stdout.write("\x1b]0;Renaming %s\x1b\\" % srcpath)

	if options.no_dest:
		util.report("no dest enabled: lower quality destination files will be replaced")

	disc = construct_disc(srcpath)

	# Calculate discid
	calculate_discid(disc)

	if options.releaseid:
		util.report("Forcing releaseid: " + options.releaseid)
		disc.releaseid = options.releaseid
	
	# Figure out a musicbrainz release
	(release, method) = get_musicbrainz_release (disc, options)

	if release is None:
		util.report("no releases found")
		raise IdentifyFailedException()

	util.report("release id: %s.html" % release.id)

	disc.releasetypes = release.getTypes()

	# No tracks, need to load them.
	if disc.tracks is None:
		disc.clear_tracks()
		tracknum=1
		
		dir = sort.sorted_dir(disc.dirname)
		for i in dir:
			fname=os.path.join(srcpath,i)
			t = toc.Track(tracknum)
			t.filename = fname
			tracknum+=1
			disc.tracks.append(t)

	# ----------------------------------------------------
	disc.set_musicbrainz_tracks(release.getTracks())
	disc.releasedate = release.getEarliestReleaseDate()

	# Look for PUIDs to submit. Only do this if fingerprinting is
	# enabled and we're not naming based on a discID.
	if options.fingerprint and method != "discid":
		submit_puids(disc, release)
		
	# Submit ISRCs
	if disc.tocfilename:
		submit_isrcs(disc, release)

	# Fill in dead fields
	disc.artist = release.artist.name
	disc.sortartist = release.artist.sortName
	if not disc.sortartist:
		disc.sortartist = mp3names.FixArtist(disc.artist)

	if musicbrainz2.model.Release.TYPE_SOUNDTRACK in disc.releasetypes and not options.leave_soundtrack_artist:
		disc.artist = "Soundtrack"
		disc.sortartist = "Soundtrack"

	# Calculate Year of album
	calculate_album_year(disc, release, options)

	disc.compilation = 0
	disc.number = 0
	disc.totalnumber = 0

	# Calculate ASIN
	if options.asin is not None:
		disc.asin = options.asin
	else:
		disc.asin = lookups.get_asin_from_release(release, prefer=".co.uk")
			
	# Set the compilation tag appropriately
	if musicbrainz2.model.Release.TYPE_COMPILATION in disc.releasetypes:
		disc.compilation = 1
	
	# Get album art 
	(imagepath, imagemime, image_needs_unlink, imagesource) = coverart.find_albumart(srcpath, disc,options)

	# Deal with disc x of y numbering
	calculate_disc_numbering(disc, release, options)

	if disc.totalnumber != 1:
		print "disc " + str(disc.number) + " of " + str(disc.totalnumber)

	# Name the album correctly
	(srcfiles, destfiles, needs_replaygain) = name_album (disc, release, srcpath, options, imagemime, imagepath)

	# Clean up image
	if (image_needs_unlink):
		os.unlink(imagepath)

	# Add replay gain
	if not options.noact and options.replaygain and len(destfiles) > 0 and needs_replaygain:
		print "Adding replaygain"
		try:
			replaygain.add_gain(destfiles)
		except replaygain.GainFailedException, e:
			print "ReplayGain Warning: " + e.reason


def get_file_list(disc):
	# If the tracks don't have filenames attached, just use the files in
	# the directory as if they are already in order
	files = []
	if (disc.tracks[0].filename is None):
		files = sort.sorted_dir(disc.dirname)
	else:
		files = [ x.filename for x in disc.tracks ]
	return files

def get_track_artist_info(release, track):
	""" Returns a tuple describing the track artist.

	(track_artist, track_sort_artist, track_artist_id).
	"""
	if release.isSingleArtistRelease():
		track_artist = release.artist.name
		track_artist_id = release.artist.id
		track_sort_artist = release.artist.sortName
	else:
		ta = lookups.get_track_artist_for_track(track)
		track_artist = ta.name
		track_artist_id = ta.id
		track_sort_artist = ta.sortName

	# Fall back to trying to guess sortartist if musicbrainz doesn't have
	# one.
	if not track_sort_artist:
		rack_sort_artist = mp3names.FixArtist(track_artist)

	return (track_artist, track_sort_artist, track_artist_id)

def check_scheme(scheme):
	""" Tries a dummy expansion on the naming scheme, raises an exception
		if the scheme contains expandos that we don't recognise.
	"""
	dummyvalues = {}
	for k in string_expandos:
		dummyvalues[k] = "foo"
	for k in integer_expandos:
		dummyvalues[k] = 1
	try:
		scheme % dummyvalues
	except KeyError, e:
		raise Exception("Unknown expando in naming scheme: %s" % e.args)
	except ValueError, e:
		raise Exception("Failed to parse naming scheme: %s" % e.args)

def expand_scheme(scheme, release, disc, track, tracknumber):
	(track_artist, track_sort_artist, track_artist_id) = get_track_artist_info(release, track.mb_track)

	# We "fix" each component individually so that we can preserve forward
	# slashes in the naming scheme.
	expando_values = { "trackartist" : mp3names.FixFilename(track_artist),
		"albumartist" : mp3names.FixFilename(disc.artist),
		"sortalbumartist" : mp3names.FixFilename(disc.sortartist),
		"sorttrackartist" : mp3names.FixFilename(track_sort_artist),
		"album" : mp3names.FixFilename(disc.album),
		"year" : int(disc.year),
		"tracknumber" : int(tracknumber),
		"trackname" : mp3names.FixFilename(track.mb_track.title)
	}
		
	try:
		newpath = scheme % expando_values
	except KeyError, e:
		raise Exception("Unknown expando %s" % e.args)

	newpath = os.path.normpath(newpath)
	
	return newpath

def rmrf(dir):
	for root, dirs, files in os.walk(dir, topdown=False):
		for name in files:
			os.remove(os.path.join(root, name))
		for name in dirs:
			os.rmdir(os.path.join(root, name))
	os.rmdir(dir)

def calc_average_bitrate(filename):
	if filename.endswith(".mp3"):
		return calc_average_bitrate_mp3(parsemp3.parsemp3(filename))
	elif filename.endswith(".ogg"):
		return calc_average_bitrate_ogg(filename)
	else:
		return 0

def calc_average_bitrate_mp3(parsed_data):
	# If we didn't find any frames, it's a dodgy mp3
	if parsed_data["frames"]==0:
		return -1
	return (reduce(lambda a,b:a+b,
		[ (rate*count) for (rate,count) in parsed_data["bitrates"].items() ],0)/
			parsed_data["frames"])

def calc_average_bitrate_ogg(filename):
	stdout = subprocess.Popen(['/usr/bin/ogginfo', filename], stdout=subprocess.PIPE).communicate()[0]
	match = re.search(r'Average bitrate: ([0-9.]*)', stdout)
	return float(match.group(1))*1000

def name_album(disc, release, srcpath, options, imagemime=None, imagepath=None, move=False):
	scheme = options.scheme
	destprefix = options.destprefix
	embedcovers = options.embedcovers
	noact = options.noact
	no_dest = options.no_dest

	replaygainwarnings = set() 

	files = get_file_list(disc)

	if len(files) != len(disc.tracks):
		util.report("Number of files to rename (%i) != number of tracks in release (%i)" % (len(files), len(disc.tracks)))
		assert False

	tracknum = 0
	srcfiles = []
	destfiles = []
	needs_replaygain = True

	# Step 1: Tag all of the files into a temporary directory
	tmpdir = tempfile.mkdtemp()
	tmpfiles = [] 

	(albumname, discnumber, discname) = lookups.parse_album_name(disc.album)

	for file in files:
		(root,ext) = os.path.splitext(file)
		tracknum = tracknum + 1
		track = disc.tracks[tracknum - 1]
		mbtrack = track.mb_track

		if mbtrack.title == "[silence]":
			continue

		newpath = expand_scheme(scheme, release, disc, track, tracknum)
		newpath += ext.lower()

		if destprefix != "":
			newpath = os.path.join(destprefix, newpath)
		else:
			newpath = os.path.join(srcpath, "../%s" % newpath)

		newpath = os.path.normpath(newpath)
		newfilename = os.path.basename(newpath)

		print "Tagging: " + newfilename

		entry = {}
		entry["srcfilepath"] = os.path.join(srcpath, file)
		entry["tmpfilename"] = os.path.join(tmpdir, newfilename)
		entry["destfilepath"] = newpath
		tmpfiles.append(entry)

		srcfilepath = os.path.join(srcpath, file)

		if not noact and ext.lower() != ".mp3":
			shutil.copyfile(os.path.join(srcpath, file), entry["tmpfilename"])
			try:
				entry["gain"] = replaygain.get_gain(entry["tmpfilename"])
				if options.replaygain:
					replaygain.remove_gain(entry["tmpfilename"])
			except replaygain.GainFailedException, e:
				replaygainwarnings.add(e.reason)
			tag.remove_tags(entry["tmpfilename"])

		(track_artist, track_sort_artist, track_artist_id) = get_track_artist_info(release, track.mb_track)

		# Set up the tag list so that we can pass it off to the
		# container-specific tagger function later.
		tags = {}
		tags[tag.TITLE] = mbtrack.title
		tags[tag.ARTIST] = track_artist
		tags[tag.ALBUM_ARTIST] = disc.artist
		tags[tag.TRACK_NUMBER] = str(tracknum)
		tags[tag.TRACK_TOTAL] = str(len(disc.tracks))
		tags[tag.ALBUM] = albumname # does not contain "(disc 1: foo)"
		tags[tag.ALBUM_ID] = os.path.basename(release.id)
		tags[tag.ALBUM_ARTIST_ID] = os.path.basename(release.artist.id)
		tags[tag.ARTIST_ID] = os.path.basename(track_artist_id)
		tags[tag.TRACK_ID] = os.path.basename(mbtrack.id)
		tags[tag.DATE] = disc.releasedate
		tags[tag.YEAR] = disc.year
		tags[tag.ARTIST_SORT] = track_sort_artist
		tags[tag.ALBUM_ARTIST_SORT] = disc.sortartist

		if disc.discid:
			tags[tag.DISC_ID] = disc.discid
		if disc.compilation:
			tags[tag.COMPILATION] = "1"
		if track.isrc is not None:
			tags[tag.ISRC] = track.isrc
		if disc.mcn is not None:
			tags[tag.MCN] = disc.mcn
		for rtype in disc.releasetypes:
			types = tags.get(tag.RELEASE_TYPES, [])
			types.append(musicbrainz2.utils.getReleaseTypeName(rtype))
			tags[tag.RELEASE_TYPES] = types
		if disc.totalnumber > 1:
			tags[tag.DISC_NUMBER] = str(disc.number)
			tags[tag.DISC_TOTAL_NUMBER] = str(disc.totalnumber)
		if discname is not None:
			tags[tag.DISC_NAME] = discname

		image = None
		if embedcovers and imagepath:
			image = imagepath

		md_lastfm.get_tags(tags, release, mbtrack, track_artist)
		md_musicbrainz.get_tags(tags, release, mbtrack, track_artist)
		md_genre.get_tags(tags, release, mbtrack, track_artist)

		tag.tag(entry["tmpfilename"], tags, noact, image)

		if options.replaygain and entry.has_key("gain") and entry["gain"] != {}:
			# Re-apply old replaygain settings to the file.
			# This will only affect FLACs.
			try:
				replaygain.set_gain(entry["tmpfilename"], entry["gain"])
			except replaygain.GainFailedException, e:
				replaygainwarnings.add(e.reason)
			needs_replaygain = False

		# Special case mp3.. tag.tag() won't do anything with mp3 files
		# as we write out the tags + bitstream in one operation, so do
		# that here.
		if ((not noact) and (ext.lower() == ".mp3")):
			# Make a temp copy and undo any mp3gain
			(fd,tmpmp3) = tempfile.mkstemp(suffix=".mp3")
			os.close(fd)
			shutil.copy(srcfilepath, tmpmp3)
			if options.replaygain:
				try: 
					replaygain.remove_gain(tmpmp3)
				except replaygain.GainFailedException, e:
					replaygainwarnings.add(e.reason)

			parsed_data = parsemp3.parsemp3(tmpmp3)
			outtags = tag.get_mp3_tags(tags)
			outtags["bitstream"] = parsed_data["bitstream"]
			if image:
				imagefp=open(image, "rb")
				imagedata=imagefp.read()
				imagefp.close()
				outtags["APIC"] = (imagemime,"\x03","",imagedata)
			serialisemp3.output(entry["tmpfilename"], outtags)
			os.unlink(tmpmp3)

		srcfiles.append(srcfilepath)

	if noact:
		print "Not calculating bitrates - in -n mode"
		for entry in tmpfiles:
			print entry["srcfilepath"],"->",entry["destfilepath"]
	else:

		# Here we try to be careful about what to do with existing files.
		# Check the number of files in the destination and source directories
		# match before contemplating overwriting.
		dest = os.path.dirname(tmpfiles[0]["destfilepath"])

		if not os.path.isdir(dest):
			#destination doesn't exist, create it and create files
			util.report("Destination files do not exist, creating")
		else:
			supported_files = []
			for i in os.listdir(dest):
				if os.path.splitext(i)[1] in tag.supported_extensions:
					supported_files.append(os.path.join(dest,i))

			if len(supported_files) == 0:
				#destination is empty, create files
				util.report("Destination files do not exist, creating")
			else:
				#dst exists and has supported files in it
				if len(supported_files) != len(tmpfiles):
					error = "Files in source and destination directories do not match. "
					error += "Probably not the same album. Delete the destination files to continue: "
					error += "\"%s\"" % dest
					util.report(error)
					#dst has a different number of files to src
					newfilecount = len(tmpdir)
					rmrf(tmpdir)
					raise FileCountMismatchException(len(supported_files), newfilecount)
				
				contains_flac = False;
				for i in supported_files:
					if i.lower().endswith('.flac'):
						contains_flac = True;

				if contains_flac:
					#flac in dst - special case - keep the flac
					util.report("Destination contains flac files, ignoring")
					rmrf(tmpdir)
					return (srcfiles, destfiles, False)
				else:
					contains_flac = False;
					for i in srcfiles:
						if i.lower().endswith('.flac'):
							contains_flac = True;
					
					# Compare old and new bitrates
					old_total_bitrate = 0
					new_total_bitrate = 0

					for entry in supported_files:
						old_total_bitrate += calc_average_bitrate(entry)
			
					for entry in tmpfiles:
						new_total_bitrate += calc_average_bitrate(entry["tmpfilename"])


					#flac in src and another format in dst - special case - pick flac
					if contains_flac:
						util.report("New files are flac")
						if no_dest:
							util.report("no dest set, purging old files")
							for i in supported_files:
								os.remove(i)	
					#another supported format in src and dst - compare quality and pick the best
					elif old_total_bitrate == new_total_bitrate:
						util.report("Bitrates are the same, ignoring")
						rmrf(tmpdir)
						return (srcfiles, destfiles, False)
					elif old_total_bitrate < new_total_bitrate:
						util.report("Old bitrate lower than new bitrate, using new files (%d / %d)" % (old_total_bitrate, new_total_bitrate))
						if no_dest:
							util.report("no dest set, purging old files")
							for i in supported_files:
								os.remove(i)
					elif old_total_bitrate > new_total_bitrate:
						util.report("Not overwriting, old bitrate higher than new (%d / %d)" % (old_total_bitrate, new_total_bitrate))
						rmrf(tmpdir)
						return (srcfiles, destfiles, False)

	try:
		os.makedirs(os.path.dirname(tmpfiles[0]["destfilepath"]))
	except OSError, e:
		if e.errno != errno.EEXIST:
			raise
	# Step 3: Overwrite/create files if appropriate
	for entry in tmpfiles:
		newpath = entry["destfilepath"]
		newdir = os.path.dirname(newpath)
		newfile = os.path.basename(newpath)

		if not noact:
			util.report(entry["srcfilepath"] + " -> " + newpath)
			# Try renaming first, then fall back to copy/rm
			try:
				os.rename(entry["tmpfilename"], newpath)
			except OSError:
				shutil.copyfile(entry["tmpfilename"], newpath)
				os.remove(entry["tmpfilename"])

		destfiles.append(newpath)

	# Move original TOC
	if disc.tocfilename:
		if not noact:
			util.report(os.path.join(srcpath, disc.tocfilename) + " -> " +  os.path.join(newdir, os.path.basename(disc.tocfilename)))
			shutil.copyfile(os.path.join(srcpath, disc.tocfilename), os.path.join(newdir, os.path.basename(disc.tocfilename)))

	# Move coverart
	if imagepath and not noact:
		util.report(imagepath + " -> " + os.path.join(newdir, "folder.jpg"))
		shutil.copyfile(imagepath, os.path.join(newdir, "folder.jpg"))

	if len(replaygainwarnings) > 0:
		print "There were problems with ReplayGain:"
		for w in replaygainwarnings:
			print " - ReplayGain Warning: " + w
		print " * Either fix the problems or use --no-replay-gain"
		needs_replaygain = False

	rmrf(tmpdir)
	return (srcfiles, destfiles, needs_replaygain)
	

if __name__ == "__main__":
	sys.exit(main())

# vim: set sw=8 tabstop=8 softtabstop=8 noexpandtab :
