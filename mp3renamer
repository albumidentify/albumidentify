#!/usr/bin/python
import musicbrainz
import parsemp3
import sys
import os
import traceback
import math
import mp3names
import serialisemp3
import pprint

dest="/tmp"

# usage: $0 <path to directory with an album in it>

def duration2str(dur):
	dur=dur/1000.0
	return "%02d:%02d:%05.02f" % (
		dur/3600,
		(dur/60) % 60,
		dur % 60
	)

files=[]
for i in os.listdir(sys.argv[1]):
	if i in [".md5sum"] or i[-4:]==".m3u":
		# Delete these files, we'll regenerate them later
		continue
	if i in ["Thumbs.db"]:
		# Ignore crappy files
		continue
	if i.endswith(".jpg"):
		print "Album art?",`os.path.join(sys.argv[1],i)`
		continue
	if i[-4:]!=".mp3":
		print "Not an mp3 file?",`os.path.join(sys.argv[1],i)`
		continue
	try:
		data=parsemp3.parsemp3(os.path.join(sys.argv[1],i))
	except:
		print "Parse Error:",`os.path.join(sys.argv[1],i)`
		traceback.print_exc()
		continue
	parsemp3.validate(data)
	files.append(data)

files.sort(lambda a,b:cmp(a["v2"]["TRCK"],b["v2"]["TRCK"]))

album=files[0]["v2"]["TALB"]
year=files[0]["v2"]["TYER"]
errors=[]
tracks=[]
for i in files:
	if i["v2"]["TALB"]!=album:
		errors.append(("warning","Album name disagrement %s vs %s" % (album,i["v2"]["TALB"])))
	if i["v2"]["TYER"]!=year:
		errors.append(("warning","Year disagrement %s vs %s" % (year,i["v2"]["TYER"])))
	tracks.append(int(i["v2"]["TRCK"]))

#tracks.sort()
for i in files:
	if i["errors"]!=[]:
		print "Errors:",i["errors"]
track=1
tracks.sort()
for i in tracks:
	while i>track:
		errors.append(("error","Missing track %d" % i))
		track=track+1
	track=track+1

if errors:
	# Display album errors
	print "Album Errors:",errors

# Ok now lets query musicbrainz
albumdata=musicbrainz.get_album_info(files[0]["v2"]["TPE1"],album)
if albumdata==[]:
	errors.append(("error", "Unknown: %s %s" % (`files[0]["v2"]["TPE1"]`,`album`)))


else:

	# Skip any versions of the album that have the wrong number of tracks
	albumdata=filter(lambda x:len(x["tracks"])==tracks[-1],albumdata)

	for i in albumdata:
		print "%s(%d):" % (i["albumname"],i["album"])
	scores=[0]*len(albumdata)
	bad=[0]*len(albumdata)
	for i in range(len(files)):
		print '',i+1,`files[i]["v2"]["TIT2"]`,"%.02f" % (files[i]["duration"]/1000.0),
		for jj in range(len(albumdata)):
			j=albumdata[jj]
			print "\t%.02f" % (j["tracks"][i]["duration"]/1000.0),"(%.02f)" % (files[i]["duration"]/1000.0-j["tracks"][i]["duration"]/1000.0),
			scores[jj]+=(files[i]["duration"]/1000.0-j["tracks"][i]["duration"]/1000.0)**2
			if abs(files[i]["duration"]/1000.0-j["tracks"][i]["duration"]/1000)>5:
				bad[jj]=1
		print
	print '','',
	best=None
	for i in range(len(albumdata)):
		print math.sqrt(scores[i])/len(files),
		if bad[i]:
			print "(bad)",
			continue
		if (best==None or scores[i]<scores[best]):
			best=i
	print

	if albumdata!=[]:
		if best is not None:
			albumdata=albumdata[best]
		else:
			errors.append(("error","Track lengths wrong"))
			albumdata=[]


if albumdata==[]:
	albumdata = {
		"artist" 	: files[0]["v2"]["TPE1"],
		"year" 		: files[0]["v2"]["TYER"],
		"albumname" 	: files[0]["v2"]["TALB"],
		"tracks"	: [],
		"releasedate"	: files[0]["v2"]["TYER"]+"-00-00",
	}

	for i in files:
		albumdata["tracks"].append({
			"artist" 	: i["v2"]["TPE1"],
			"name"		: i["v2"]["TIT2"],
			"track"		: int(i["v2"]["TRCK"]),
			"duration"	: i["duration"],
		})

if "year" not in albumdata:
	albumdata["releasedate"]=files[0]["v2"]["TYER"]+"-00-00"
	albumdata["year"]=files[0]["v2"]["TYER"]
	errors.append(("warning","No year in musicbrainz, using year from ID3v2 tag"))

# albumdata now holds the data we think we have

if errors==[]:
	classification="good"
elif filter(lambda (a,b):a!="warning",errors)==[]:
	classification="bad"
else:
	classification="ugly"

	

# Clean up filenames
albumdata["artist"]=mp3names.FixArtist(albumdata["artist"])
for i in ["artist","year","albumname"]:
	albumdata["fn-%s" % i]=mp3names.FixFilename(albumdata[i])


# Now create the directory
p=os.path.join(dest,classification,"%(fn-artist)s - %(fn-year)s - %(fn-albumname)s" % albumdata)
try:
	os.makedirs(p)
except OSError, e:
	pass
for i in range(len(files)):
	albumdata["tracks"][i]["artist"]=\
		mp3names.FixArtist(albumdata["tracks"][i]["artist"])
	for j in ["artist","name"]:
		albumdata["tracks"][i]["fn-%s" % j]=\
			mp3names.FixFilename(albumdata["tracks"][i][j])
	fname=os.path.join(p,"%(track)02i - %(fn-artist)s - %(fn-name)s.mp3" % albumdata["tracks"][i])
	print "Writing",`fname`

	id3={
		"TIT2" : albumdata["tracks"][i]["name"].decode("utf8"),
		"TPE1" : albumdata["tracks"][i]["artist"].decode("utf8"),
		"TALB" : albumdata["albumname"].decode("utf8"),
		"TYER" : albumdata["releasedate"][:4],
		"TDAT" : albumdata["releasedate"][8:10]+albumdata["releasedate"][5:7],
		"TRCK" : "%d/%d" % (i+1,len(albumdata["tracks"])),
			# +1 because humans count from 1...
		"TLEN" : str(reduce(lambda l,r:l+r,map(lambda x:x["duration"],albumdata["tracks"]))),
		"bitstream" : files[i]["bitstream"],
		"COMM" : "",
	}
	serialisemp3.output(fname,id3)


# Write out a log file for us
errfname = os.path.join(p,"renamer.log")
f=open(errfname,"w")
for i in files:
	if i["errors"]:
		print >>f,i["filename"],":"
		for j in i["errors"]:
			print >>f,i
		print >>f
if errors:
	print >>f,"album errors:"
	for i in errors:
		print >>f,i
f.close()
